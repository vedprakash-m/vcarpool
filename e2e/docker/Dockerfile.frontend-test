# Multi-stage Dockerfile for Frontend E2E Testing in Monorepo
# This Dockerfile builds the shared package first, then the frontend

# Stage 1: Build shared package
FROM node:20-alpine AS shared-builder

WORKDIR /app

# Copy root package files
COPY package*.json ./
COPY tsconfig.json ./

# Copy shared package
COPY shared/ ./shared/

# Install dependencies and build shared package
RUN npm ci --ignore-scripts
RUN npm run build --workspace=shared

# Stage 2: Build frontend
FROM node:20-alpine AS frontend-builder

WORKDIR /app

# Copy root package files
COPY package*.json ./
COPY tsconfig.json ./

# Copy shared package (source and built artifacts)
COPY shared/ ./shared/
COPY --from=shared-builder /app/shared/dist ./shared/dist

# Copy frontend source
COPY frontend/ ./frontend/

# Install dependencies for the entire monorepo
RUN npm ci --ignore-scripts

# Build shared package (in case it wasn't copied properly)
RUN npm run build --workspace=shared

# Build frontend
RUN cd frontend && npm run build

# Stage 3: Production runtime
FROM node:20-alpine AS runtime

WORKDIR /app

# Install curl for health checks
RUN apk add --no-cache curl

# Copy root package files for workspace resolution
COPY package*.json ./

# Copy shared package (built artifacts only)
COPY --from=shared-builder /app/shared/dist ./shared/dist
COPY --from=shared-builder /app/shared/package.json ./shared/package.json

# Copy frontend built artifacts and config
COPY --from=frontend-builder /app/frontend/.next ./frontend/.next
COPY --from=frontend-builder /app/frontend/package.json ./frontend/package.json
COPY --from=frontend-builder /app/frontend/next.config.js ./frontend/next.config.js
COPY --from=frontend-builder /app/frontend/public ./frontend/public

# Install only production dependencies
RUN npm ci --only=production --ignore-scripts

# Set working directory to frontend
WORKDIR /app/frontend

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=45s --retries=3 \
  CMD curl -f http://localhost:3000 || exit 1

# Start the application
CMD ["npm", "start"]
